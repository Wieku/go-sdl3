//go:build windows || unix

package mixer

import (
	sdl "github.com/Zyko0/go-sdl3/sdl"
	puregogen "github.com/Zyko0/purego-gen"
	purego "github.com/ebitengine/purego"
	"runtime"
	"unsafe"
)

// File generated by github.com/Zyko0/purego-gen. DO NOT EDIT.

var (
	// Library handles
	_hnd_mixer uintptr
	// Symbols
	// mixer
	_addr_Mix_Version              uintptr
	_addr_Mix_Init                 uintptr
	_addr_Mix_Quit                 uintptr
	_addr_Mix_OpenAudio            uintptr
	_addr_Mix_PauseAudio           uintptr
	_addr_Mix_QuerySpec            uintptr
	_addr_Mix_AllocateChannels     uintptr
	_addr_Mix_LoadWAV_IO           uintptr
	_addr_Mix_LoadWAV              uintptr
	_addr_Mix_LoadMUS              uintptr
	_addr_Mix_LoadMUS_IO           uintptr
	_addr_Mix_LoadMUSType_IO       uintptr
	_addr_Mix_QuickLoad_WAV        uintptr
	_addr_Mix_QuickLoad_RAW        uintptr
	_addr_Mix_FreeChunk            uintptr
	_addr_Mix_FreeMusic            uintptr
	_addr_Mix_GetNumChunkDecoders  uintptr
	_addr_Mix_GetChunkDecoder      uintptr
	_addr_Mix_HasChunkDecoder      uintptr
	_addr_Mix_GetNumMusicDecoders  uintptr
	_addr_Mix_GetMusicDecoder      uintptr
	_addr_Mix_HasMusicDecoder      uintptr
	_addr_Mix_GetMusicType         uintptr
	_addr_Mix_GetMusicTitle        uintptr
	_addr_Mix_GetMusicTitleTag     uintptr
	_addr_Mix_GetMusicArtistTag    uintptr
	_addr_Mix_GetMusicAlbumTag     uintptr
	_addr_Mix_GetMusicCopyrightTag uintptr
	_addr_Mix_SetPostMix           uintptr
	_addr_Mix_HookMusic            uintptr
	_addr_Mix_HookMusicFinished    uintptr
	_addr_Mix_GetMusicHookData     uintptr
	_addr_Mix_ChannelFinished      uintptr
	_addr_Mix_RegisterEffect       uintptr
	_addr_Mix_UnregisterEffect     uintptr
	_addr_Mix_UnregisterAllEffects uintptr
	_addr_Mix_SetPanning           uintptr
	_addr_Mix_SetPosition          uintptr
	_addr_Mix_SetDistance          uintptr
	_addr_Mix_SetReverseStereo     uintptr
	_addr_Mix_ReserveChannels      uintptr
	_addr_Mix_GroupChannel         uintptr
	_addr_Mix_GroupChannels        uintptr
	_addr_Mix_GroupAvailable       uintptr
	_addr_Mix_GroupCount           uintptr
	_addr_Mix_GroupOldest          uintptr
	_addr_Mix_GroupNewer           uintptr
	_addr_Mix_PlayChannel          uintptr
	_addr_Mix_PlayChannelTimed     uintptr
	_addr_Mix_PlayMusic            uintptr
	_addr_Mix_FadeInMusic          uintptr
	_addr_Mix_FadeInChannel        uintptr
	_addr_Mix_FadeInChannelTimed   uintptr
	_addr_Mix_Volume               uintptr
	_addr_Mix_VolumeChunk          uintptr
	_addr_Mix_VolumeMusic          uintptr
	_addr_Mix_GetMusicVolume       uintptr
	_addr_Mix_MasterVolume         uintptr
	_addr_Mix_HaltChannel          uintptr
	_addr_Mix_HaltGroup            uintptr
	_addr_Mix_HaltMusic            uintptr
	_addr_Mix_ExpireChannel        uintptr
	_addr_Mix_FadeOutChannel       uintptr
	_addr_Mix_FadeOutGroup         uintptr
	_addr_Mix_FadeOutMusic         uintptr
	_addr_Mix_FadingMusic          uintptr
	_addr_Mix_FadingChannel        uintptr
	_addr_Mix_Pause                uintptr
	_addr_Mix_PauseGroup           uintptr
	_addr_Mix_Resume               uintptr
	_addr_Mix_ResumeGroup          uintptr
	_addr_Mix_Paused               uintptr
	_addr_Mix_PauseMusic           uintptr
	_addr_Mix_ResumeMusic          uintptr
	_addr_Mix_RewindMusic          uintptr
	_addr_Mix_PausedMusic          uintptr
	_addr_Mix_ModMusicJumpToOrder  uintptr
	_addr_Mix_StartTrack           uintptr
	_addr_Mix_GetNumTracks         uintptr
	_addr_Mix_Playing              uintptr
	_addr_Mix_PlayingMusic         uintptr
	_addr_Mix_SetSoundFonts        uintptr
	_addr_Mix_GetSoundFonts        uintptr
	_addr_Mix_EachSoundFont        uintptr
	_addr_Mix_SetTimidityCfg       uintptr
	_addr_Mix_GetTimidityCfg       uintptr
	_addr_Mix_GetChunk             uintptr
	_addr_Mix_CloseAudio           uintptr
)

func initialize() {
	var err error

	// Symbols mixer
	_addr_Mix_Version, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_Version")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_Version")
	}
	_addr_Mix_Init, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_Init")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_Init")
	}
	_addr_Mix_Quit, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_Quit")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_Quit")
	}
	_addr_Mix_OpenAudio, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_OpenAudio")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_OpenAudio")
	}
	_addr_Mix_PauseAudio, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_PauseAudio")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_PauseAudio")
	}
	_addr_Mix_QuerySpec, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_QuerySpec")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_QuerySpec")
	}
	_addr_Mix_AllocateChannels, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_AllocateChannels")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_AllocateChannels")
	}
	_addr_Mix_LoadWAV_IO, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_LoadWAV_IO")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_LoadWAV_IO")
	}
	_addr_Mix_LoadWAV, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_LoadWAV")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_LoadWAV")
	}
	_addr_Mix_LoadMUS, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_LoadMUS")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_LoadMUS")
	}
	_addr_Mix_LoadMUS_IO, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_LoadMUS_IO")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_LoadMUS_IO")
	}
	_addr_Mix_LoadMUSType_IO, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_LoadMUSType_IO")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_LoadMUSType_IO")
	}
	_addr_Mix_QuickLoad_WAV, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_QuickLoad_WAV")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_QuickLoad_WAV")
	}
	_addr_Mix_QuickLoad_RAW, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_QuickLoad_RAW")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_QuickLoad_RAW")
	}
	_addr_Mix_FreeChunk, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_FreeChunk")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_FreeChunk")
	}
	_addr_Mix_FreeMusic, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_FreeMusic")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_FreeMusic")
	}
	_addr_Mix_GetNumChunkDecoders, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_GetNumChunkDecoders")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_GetNumChunkDecoders")
	}
	_addr_Mix_GetChunkDecoder, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_GetChunkDecoder")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_GetChunkDecoder")
	}
	_addr_Mix_HasChunkDecoder, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_HasChunkDecoder")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_HasChunkDecoder")
	}
	_addr_Mix_GetNumMusicDecoders, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_GetNumMusicDecoders")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_GetNumMusicDecoders")
	}
	_addr_Mix_GetMusicDecoder, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_GetMusicDecoder")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_GetMusicDecoder")
	}
	_addr_Mix_HasMusicDecoder, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_HasMusicDecoder")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_HasMusicDecoder")
	}
	_addr_Mix_GetMusicType, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_GetMusicType")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_GetMusicType")
	}
	_addr_Mix_GetMusicTitle, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_GetMusicTitle")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_GetMusicTitle")
	}
	_addr_Mix_GetMusicTitleTag, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_GetMusicTitleTag")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_GetMusicTitleTag")
	}
	_addr_Mix_GetMusicArtistTag, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_GetMusicArtistTag")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_GetMusicArtistTag")
	}
	_addr_Mix_GetMusicAlbumTag, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_GetMusicAlbumTag")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_GetMusicAlbumTag")
	}
	_addr_Mix_GetMusicCopyrightTag, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_GetMusicCopyrightTag")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_GetMusicCopyrightTag")
	}
	_addr_Mix_SetPostMix, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_SetPostMix")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_SetPostMix")
	}
	_addr_Mix_HookMusic, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_HookMusic")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_HookMusic")
	}
	_addr_Mix_HookMusicFinished, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_HookMusicFinished")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_HookMusicFinished")
	}
	_addr_Mix_GetMusicHookData, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_GetMusicHookData")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_GetMusicHookData")
	}
	_addr_Mix_ChannelFinished, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_ChannelFinished")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_ChannelFinished")
	}
	_addr_Mix_RegisterEffect, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_RegisterEffect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_RegisterEffect")
	}
	_addr_Mix_UnregisterEffect, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_UnregisterEffect")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_UnregisterEffect")
	}
	_addr_Mix_UnregisterAllEffects, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_UnregisterAllEffects")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_UnregisterAllEffects")
	}
	_addr_Mix_SetPanning, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_SetPanning")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_SetPanning")
	}
	_addr_Mix_SetPosition, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_SetPosition")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_SetPosition")
	}
	_addr_Mix_SetDistance, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_SetDistance")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_SetDistance")
	}
	_addr_Mix_SetReverseStereo, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_SetReverseStereo")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_SetReverseStereo")
	}
	_addr_Mix_ReserveChannels, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_ReserveChannels")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_ReserveChannels")
	}
	_addr_Mix_GroupChannel, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_GroupChannel")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_GroupChannel")
	}
	_addr_Mix_GroupChannels, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_GroupChannels")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_GroupChannels")
	}
	_addr_Mix_GroupAvailable, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_GroupAvailable")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_GroupAvailable")
	}
	_addr_Mix_GroupCount, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_GroupCount")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_GroupCount")
	}
	_addr_Mix_GroupOldest, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_GroupOldest")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_GroupOldest")
	}
	_addr_Mix_GroupNewer, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_GroupNewer")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_GroupNewer")
	}
	_addr_Mix_PlayChannel, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_PlayChannel")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_PlayChannel")
	}
	_addr_Mix_PlayChannelTimed, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_PlayChannelTimed")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_PlayChannelTimed")
	}
	_addr_Mix_PlayMusic, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_PlayMusic")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_PlayMusic")
	}
	_addr_Mix_FadeInMusic, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_FadeInMusic")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_FadeInMusic")
	}
	_addr_Mix_FadeInChannel, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_FadeInChannel")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_FadeInChannel")
	}
	_addr_Mix_FadeInChannelTimed, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_FadeInChannelTimed")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_FadeInChannelTimed")
	}
	_addr_Mix_Volume, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_Volume")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_Volume")
	}
	_addr_Mix_VolumeChunk, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_VolumeChunk")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_VolumeChunk")
	}
	_addr_Mix_VolumeMusic, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_VolumeMusic")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_VolumeMusic")
	}
	_addr_Mix_GetMusicVolume, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_GetMusicVolume")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_GetMusicVolume")
	}
	_addr_Mix_MasterVolume, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_MasterVolume")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_MasterVolume")
	}
	_addr_Mix_HaltChannel, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_HaltChannel")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_HaltChannel")
	}
	_addr_Mix_HaltGroup, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_HaltGroup")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_HaltGroup")
	}
	_addr_Mix_HaltMusic, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_HaltMusic")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_HaltMusic")
	}
	_addr_Mix_ExpireChannel, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_ExpireChannel")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_ExpireChannel")
	}
	_addr_Mix_FadeOutChannel, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_FadeOutChannel")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_FadeOutChannel")
	}
	_addr_Mix_FadeOutGroup, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_FadeOutGroup")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_FadeOutGroup")
	}
	_addr_Mix_FadeOutMusic, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_FadeOutMusic")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_FadeOutMusic")
	}
	_addr_Mix_FadingMusic, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_FadingMusic")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_FadingMusic")
	}
	_addr_Mix_FadingChannel, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_FadingChannel")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_FadingChannel")
	}
	_addr_Mix_Pause, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_Pause")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_Pause")
	}
	_addr_Mix_PauseGroup, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_PauseGroup")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_PauseGroup")
	}
	_addr_Mix_Resume, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_Resume")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_Resume")
	}
	_addr_Mix_ResumeGroup, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_ResumeGroup")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_ResumeGroup")
	}
	_addr_Mix_Paused, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_Paused")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_Paused")
	}
	_addr_Mix_PauseMusic, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_PauseMusic")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_PauseMusic")
	}
	_addr_Mix_ResumeMusic, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_ResumeMusic")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_ResumeMusic")
	}
	_addr_Mix_RewindMusic, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_RewindMusic")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_RewindMusic")
	}
	_addr_Mix_PausedMusic, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_PausedMusic")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_PausedMusic")
	}
	_addr_Mix_ModMusicJumpToOrder, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_ModMusicJumpToOrder")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_ModMusicJumpToOrder")
	}
	_addr_Mix_StartTrack, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_StartTrack")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_StartTrack")
	}
	_addr_Mix_GetNumTracks, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_GetNumTracks")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_GetNumTracks")
	}
	_addr_Mix_Playing, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_Playing")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_Playing")
	}
	_addr_Mix_PlayingMusic, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_PlayingMusic")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_PlayingMusic")
	}
	_addr_Mix_SetSoundFonts, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_SetSoundFonts")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_SetSoundFonts")
	}
	_addr_Mix_GetSoundFonts, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_GetSoundFonts")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_GetSoundFonts")
	}
	_addr_Mix_EachSoundFont, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_EachSoundFont")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_EachSoundFont")
	}
	_addr_Mix_SetTimidityCfg, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_SetTimidityCfg")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_SetTimidityCfg")
	}
	_addr_Mix_GetTimidityCfg, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_GetTimidityCfg")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_GetTimidityCfg")
	}
	_addr_Mix_GetChunk, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_GetChunk")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_GetChunk")
	}
	_addr_Mix_CloseAudio, err = puregogen.OpenSymbol(_hnd_mixer, "Mix_CloseAudio")
	if err != nil {
		panic("cannot puregogen.OpenSymbol: Mix_CloseAudio")
	}

	iVersion = func() int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_Version)
		__r0 := int32(_r0)
		return __r0
	}
	iInit = func(flags MIX_InitFlags) MIX_InitFlags {
		_r0, _, _ := purego.SyscallN(_addr_Mix_Init, uintptr(flags))
		__r0 := MIX_InitFlags(_r0)
		return __r0
	}
	iQuit = func() {
		purego.SyscallN(_addr_Mix_Quit)
	}
	iOpenAudio = func(devid sdl.AudioDeviceID, spec *sdl.AudioSpec) bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_OpenAudio, uintptr(devid), uintptr(unsafe.Pointer(spec)))
		__r0 := _r0 != 0
		runtime.KeepAlive(spec)
		return __r0
	}
	iPauseAudio = func(pause_on int32) {
		purego.SyscallN(_addr_Mix_PauseAudio, uintptr(pause_on))
	}
	iQuerySpec = func(frequency *int32, format *sdl.AudioFormat, channels *int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_QuerySpec, uintptr(unsafe.Pointer(frequency)), uintptr(unsafe.Pointer(format)), uintptr(unsafe.Pointer(channels)))
		__r0 := _r0 != 0
		runtime.KeepAlive(frequency)
		runtime.KeepAlive(format)
		runtime.KeepAlive(channels)
		return __r0
	}
	iAllocateChannels = func(numchans int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_AllocateChannels, uintptr(numchans))
		__r0 := int32(_r0)
		return __r0
	}
	iLoadWAV_IO = func(src *sdl.IOStream, closeio bool) *Chunk {
		_r0, _, _ := purego.SyscallN(_addr_Mix_LoadWAV_IO, uintptr(unsafe.Pointer(src)), puregogen.BoolToUintptr(closeio))
		__r0 := (*Chunk)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(src)
		return __r0
	}
	iLoadWAV = func(file string) *Chunk {
		_r0, _, _ := purego.SyscallN(_addr_Mix_LoadWAV, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(file))))
		__r0 := (*Chunk)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(file)
		return __r0
	}
	iLoadMUS = func(file string) *Music {
		_r0, _, _ := purego.SyscallN(_addr_Mix_LoadMUS, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(file))))
		__r0 := (*Music)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(file)
		return __r0
	}
	iLoadMUS_IO = func(src *sdl.IOStream, closeio bool) *Music {
		_r0, _, _ := purego.SyscallN(_addr_Mix_LoadMUS_IO, uintptr(unsafe.Pointer(src)), puregogen.BoolToUintptr(closeio))
		__r0 := (*Music)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(src)
		return __r0
	}
	iLoadMUSType_IO = func(src *sdl.IOStream, typ MusicType, closeio bool) *Music {
		_r0, _, _ := purego.SyscallN(_addr_Mix_LoadMUSType_IO, uintptr(unsafe.Pointer(src)), uintptr(typ), puregogen.BoolToUintptr(closeio))
		__r0 := (*Music)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(src)
		return __r0
	}
	iQuickLoad_WAV = func(mem *uint8) *Chunk {
		_r0, _, _ := purego.SyscallN(_addr_Mix_QuickLoad_WAV, uintptr(unsafe.Pointer(mem)))
		__r0 := (*Chunk)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(mem)
		return __r0
	}
	iQuickLoad_RAW = func(mem *uint8, len uint32) *Chunk {
		_r0, _, _ := purego.SyscallN(_addr_Mix_QuickLoad_RAW, uintptr(unsafe.Pointer(mem)), uintptr(len))
		__r0 := (*Chunk)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(mem)
		return __r0
	}
	iFreeChunk = func(chunk *Chunk) {
		purego.SyscallN(_addr_Mix_FreeChunk, uintptr(unsafe.Pointer(chunk)))
		runtime.KeepAlive(chunk)
	}
	iFreeMusic = func(music *Music) {
		purego.SyscallN(_addr_Mix_FreeMusic, uintptr(unsafe.Pointer(music)))
		runtime.KeepAlive(music)
	}
	iGetNumChunkDecoders = func() int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_GetNumChunkDecoders)
		__r0 := int32(_r0)
		return __r0
	}
	iGetChunkDecoder = func(index int32) string {
		_r0, _, _ := purego.SyscallN(_addr_Mix_GetChunkDecoder, uintptr(index))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iHasChunkDecoder = func(name string) bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_HasChunkDecoder, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))))
		__r0 := _r0 != 0
		runtime.KeepAlive(name)
		return __r0
	}
	iGetNumMusicDecoders = func() int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_GetNumMusicDecoders)
		__r0 := int32(_r0)
		return __r0
	}
	iGetMusicDecoder = func(index int32) string {
		_r0, _, _ := purego.SyscallN(_addr_Mix_GetMusicDecoder, uintptr(index))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iHasMusicDecoder = func(name string) bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_HasMusicDecoder, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(name))))
		__r0 := _r0 != 0
		runtime.KeepAlive(name)
		return __r0
	}
	iGetMusicType = func(music *Music) MusicType {
		_r0, _, _ := purego.SyscallN(_addr_Mix_GetMusicType, uintptr(unsafe.Pointer(music)))
		__r0 := MusicType(_r0)
		runtime.KeepAlive(music)
		return __r0
	}
	iGetMusicTitle = func(music *Music) string {
		_r0, _, _ := purego.SyscallN(_addr_Mix_GetMusicTitle, uintptr(unsafe.Pointer(music)))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(music)
		return __r0
	}
	iGetMusicTitleTag = func(music *Music) string {
		_r0, _, _ := purego.SyscallN(_addr_Mix_GetMusicTitleTag, uintptr(unsafe.Pointer(music)))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(music)
		return __r0
	}
	iGetMusicArtistTag = func(music *Music) string {
		_r0, _, _ := purego.SyscallN(_addr_Mix_GetMusicArtistTag, uintptr(unsafe.Pointer(music)))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(music)
		return __r0
	}
	iGetMusicAlbumTag = func(music *Music) string {
		_r0, _, _ := purego.SyscallN(_addr_Mix_GetMusicAlbumTag, uintptr(unsafe.Pointer(music)))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(music)
		return __r0
	}
	iGetMusicCopyrightTag = func(music *Music) string {
		_r0, _, _ := purego.SyscallN(_addr_Mix_GetMusicCopyrightTag, uintptr(unsafe.Pointer(music)))
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		runtime.KeepAlive(music)
		return __r0
	}
	iSetPostMix = func(mix_func MixCallback, arg uintptr) {
		purego.SyscallN(_addr_Mix_SetPostMix, purego.NewCallback(mix_func), uintptr(arg))
	}
	iHookMusic = func(mix_func MixCallback, arg uintptr) {
		purego.SyscallN(_addr_Mix_HookMusic, purego.NewCallback(mix_func), uintptr(arg))
	}
	iHookMusicFinished = func(music_finished MusicFinishedCallback) {
		purego.SyscallN(_addr_Mix_HookMusicFinished, purego.NewCallback(music_finished))
	}
	iGetMusicHookData = func() uintptr {
		_r0, _, _ := purego.SyscallN(_addr_Mix_GetMusicHookData)
		__r0 := uintptr(_r0)
		return __r0
	}
	iChannelFinished = func(channel_finished ChannelFinishedCallback) {
		purego.SyscallN(_addr_Mix_ChannelFinished, purego.NewCallback(channel_finished))
	}
	iRegisterEffect = func(chann int32, f EffectFunc_t, d EffectDone_t, arg uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_RegisterEffect, uintptr(chann), purego.NewCallback(f), purego.NewCallback(d), uintptr(arg))
		__r0 := _r0 != 0
		return __r0
	}
	iUnregisterEffect = func(channel int32, f EffectFunc_t) bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_UnregisterEffect, uintptr(channel), purego.NewCallback(f))
		__r0 := _r0 != 0
		return __r0
	}
	iUnregisterAllEffects = func(channel int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_UnregisterAllEffects, uintptr(channel))
		__r0 := _r0 != 0
		return __r0
	}
	iSetPanning = func(channel int32, left uint8, right uint8) bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_SetPanning, uintptr(channel), uintptr(left), uintptr(right))
		__r0 := _r0 != 0
		return __r0
	}
	iSetPosition = func(channel int32, angle int16, distance uint8) bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_SetPosition, uintptr(channel), uintptr(angle), uintptr(distance))
		__r0 := _r0 != 0
		return __r0
	}
	iSetDistance = func(channel int32, distance uint8) bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_SetDistance, uintptr(channel), uintptr(distance))
		__r0 := _r0 != 0
		return __r0
	}
	iSetReverseStereo = func(channel int32, flip int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_SetReverseStereo, uintptr(channel), uintptr(flip))
		__r0 := _r0 != 0
		return __r0
	}
	iReserveChannels = func(num int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_ReserveChannels, uintptr(num))
		__r0 := int32(_r0)
		return __r0
	}
	iGroupChannel = func(which int32, tag int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_GroupChannel, uintptr(which), uintptr(tag))
		__r0 := _r0 != 0
		return __r0
	}
	iGroupChannels = func(from int32, to int32, tag int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_GroupChannels, uintptr(from), uintptr(to), uintptr(tag))
		__r0 := _r0 != 0
		return __r0
	}
	iGroupAvailable = func(tag int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_GroupAvailable, uintptr(tag))
		__r0 := int32(_r0)
		return __r0
	}
	iGroupCount = func(tag int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_GroupCount, uintptr(tag))
		__r0 := int32(_r0)
		return __r0
	}
	iGroupOldest = func(tag int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_GroupOldest, uintptr(tag))
		__r0 := int32(_r0)
		return __r0
	}
	iGroupNewer = func(tag int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_GroupNewer, uintptr(tag))
		__r0 := int32(_r0)
		return __r0
	}
	iPlayChannel = func(channel int32, chunk *Chunk, loops int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_PlayChannel, uintptr(channel), uintptr(unsafe.Pointer(chunk)), uintptr(loops))
		__r0 := int32(_r0)
		runtime.KeepAlive(chunk)
		return __r0
	}
	iPlayChannelTimed = func(channel int32, chunk *Chunk, loops int32, ticks int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_PlayChannelTimed, uintptr(channel), uintptr(unsafe.Pointer(chunk)), uintptr(loops), uintptr(ticks))
		__r0 := int32(_r0)
		runtime.KeepAlive(chunk)
		return __r0
	}
	iPlayMusic = func(music *Music, loops int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_PlayMusic, uintptr(unsafe.Pointer(music)), uintptr(loops))
		__r0 := _r0 != 0
		runtime.KeepAlive(music)
		return __r0
	}
	iFadeInMusic = func(music *Music, loops int32, ms int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_FadeInMusic, uintptr(unsafe.Pointer(music)), uintptr(loops), uintptr(ms))
		__r0 := _r0 != 0
		runtime.KeepAlive(music)
		return __r0
	}
	purego.RegisterLibFunc(&iFadeInMusicPos, _hnd_mixer, "Mix_FadeInMusicPos")
	iFadeInChannel = func(channel int32, chunk *Chunk, loops int32, ms int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_FadeInChannel, uintptr(channel), uintptr(unsafe.Pointer(chunk)), uintptr(loops), uintptr(ms))
		__r0 := int32(_r0)
		runtime.KeepAlive(chunk)
		return __r0
	}
	iFadeInChannelTimed = func(channel int32, chunk *Chunk, loops int32, ms int32, ticks int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_FadeInChannelTimed, uintptr(channel), uintptr(unsafe.Pointer(chunk)), uintptr(loops), uintptr(ms), uintptr(ticks))
		__r0 := int32(_r0)
		runtime.KeepAlive(chunk)
		return __r0
	}
	iVolume = func(channel int32, volume int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_Volume, uintptr(channel), uintptr(volume))
		__r0 := int32(_r0)
		return __r0
	}
	iVolumeChunk = func(chunk *Chunk, volume int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_VolumeChunk, uintptr(unsafe.Pointer(chunk)), uintptr(volume))
		__r0 := int32(_r0)
		runtime.KeepAlive(chunk)
		return __r0
	}
	iVolumeMusic = func(volume int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_VolumeMusic, uintptr(volume))
		__r0 := int32(_r0)
		return __r0
	}
	iGetMusicVolume = func(music *Music) int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_GetMusicVolume, uintptr(unsafe.Pointer(music)))
		__r0 := int32(_r0)
		runtime.KeepAlive(music)
		return __r0
	}
	iMasterVolume = func(volume int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_MasterVolume, uintptr(volume))
		__r0 := int32(_r0)
		return __r0
	}
	iHaltChannel = func(channel int32) {
		purego.SyscallN(_addr_Mix_HaltChannel, uintptr(channel))
	}
	iHaltGroup = func(tag int32) {
		purego.SyscallN(_addr_Mix_HaltGroup, uintptr(tag))
	}
	iHaltMusic = func() {
		purego.SyscallN(_addr_Mix_HaltMusic)
	}
	iExpireChannel = func(channel int32, ticks int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_ExpireChannel, uintptr(channel), uintptr(ticks))
		__r0 := int32(_r0)
		return __r0
	}
	iFadeOutChannel = func(which int32, ms int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_FadeOutChannel, uintptr(which), uintptr(ms))
		__r0 := int32(_r0)
		return __r0
	}
	iFadeOutGroup = func(tag int32, ms int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_FadeOutGroup, uintptr(tag), uintptr(ms))
		__r0 := int32(_r0)
		return __r0
	}
	iFadeOutMusic = func(ms int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_FadeOutMusic, uintptr(ms))
		__r0 := _r0 != 0
		return __r0
	}
	iFadingMusic = func() Fading {
		_r0, _, _ := purego.SyscallN(_addr_Mix_FadingMusic)
		__r0 := Fading(_r0)
		return __r0
	}
	iFadingChannel = func(which int32) Fading {
		_r0, _, _ := purego.SyscallN(_addr_Mix_FadingChannel, uintptr(which))
		__r0 := Fading(_r0)
		return __r0
	}
	iPause = func(channel int32) {
		purego.SyscallN(_addr_Mix_Pause, uintptr(channel))
	}
	iPauseGroup = func(tag int32) {
		purego.SyscallN(_addr_Mix_PauseGroup, uintptr(tag))
	}
	iResume = func(channel int32) {
		purego.SyscallN(_addr_Mix_Resume, uintptr(channel))
	}
	iResumeGroup = func(tag int32) {
		purego.SyscallN(_addr_Mix_ResumeGroup, uintptr(tag))
	}
	iPaused = func(channel int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_Paused, uintptr(channel))
		__r0 := int32(_r0)
		return __r0
	}
	iPauseMusic = func() {
		purego.SyscallN(_addr_Mix_PauseMusic)
	}
	iResumeMusic = func() {
		purego.SyscallN(_addr_Mix_ResumeMusic)
	}
	iRewindMusic = func() {
		purego.SyscallN(_addr_Mix_RewindMusic)
	}
	iPausedMusic = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_PausedMusic)
		__r0 := _r0 != 0
		return __r0
	}
	iModMusicJumpToOrder = func(order int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_ModMusicJumpToOrder, uintptr(order))
		__r0 := _r0 != 0
		return __r0
	}
	iStartTrack = func(music *Music, track int32) bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_StartTrack, uintptr(unsafe.Pointer(music)), uintptr(track))
		__r0 := _r0 != 0
		runtime.KeepAlive(music)
		return __r0
	}
	iGetNumTracks = func(music *Music) int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_GetNumTracks, uintptr(unsafe.Pointer(music)))
		__r0 := int32(_r0)
		runtime.KeepAlive(music)
		return __r0
	}
	purego.RegisterLibFunc(&iSetMusicPosition, _hnd_mixer, "Mix_SetMusicPosition")
	purego.RegisterLibFunc(&iGetMusicPosition, _hnd_mixer, "Mix_GetMusicPosition")
	purego.RegisterLibFunc(&iMusicDuration, _hnd_mixer, "Mix_MusicDuration")
	purego.RegisterLibFunc(&iGetMusicLoopStartTime, _hnd_mixer, "Mix_GetMusicLoopStartTime")
	purego.RegisterLibFunc(&iGetMusicLoopEndTime, _hnd_mixer, "Mix_GetMusicLoopEndTime")
	purego.RegisterLibFunc(&iGetMusicLoopLengthTime, _hnd_mixer, "Mix_GetMusicLoopLengthTime")
	iPlaying = func(channel int32) int32 {
		_r0, _, _ := purego.SyscallN(_addr_Mix_Playing, uintptr(channel))
		__r0 := int32(_r0)
		return __r0
	}
	iPlayingMusic = func() bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_PlayingMusic)
		__r0 := _r0 != 0
		return __r0
	}
	iSetSoundFonts = func(paths string) bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_SetSoundFonts, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(paths))))
		__r0 := _r0 != 0
		runtime.KeepAlive(paths)
		return __r0
	}
	iGetSoundFonts = func() string {
		_r0, _, _ := purego.SyscallN(_addr_Mix_GetSoundFonts)
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iEachSoundFont = func(function EachSoundFontCallback, data uintptr) bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_EachSoundFont, purego.NewCallback(function), uintptr(data))
		__r0 := _r0 != 0
		return __r0
	}
	iSetTimidityCfg = func(path string) bool {
		_r0, _, _ := purego.SyscallN(_addr_Mix_SetTimidityCfg, uintptr(unsafe.Pointer(puregogen.BytePtrFromString(path))))
		__r0 := _r0 != 0
		runtime.KeepAlive(path)
		return __r0
	}
	iGetTimidityCfg = func() string {
		_r0, _, _ := purego.SyscallN(_addr_Mix_GetTimidityCfg)
		__r0 := "" + puregogen.BytePtrToString(*(**byte)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iGetChunk = func(channel int32) *Chunk {
		_r0, _, _ := purego.SyscallN(_addr_Mix_GetChunk, uintptr(channel))
		__r0 := (*Chunk)(*(*unsafe.Pointer)(unsafe.Pointer(&_r0)))
		return __r0
	}
	iCloseAudio = func() {
		purego.SyscallN(_addr_Mix_CloseAudio)
	}
}
